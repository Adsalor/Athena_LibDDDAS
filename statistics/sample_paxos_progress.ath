load "distributions"
load "probability"
load "randomVars"

##########################################################################
# Trying to express and prove the high level progress property here


# A predicate that returns true if a given real is a constant
declare constant: [Real] -> Boolean

# The total processing time
declare TP, c2: Real

# The six message delays
define [X1 X2 X3 X4 X5 X6] := [?X1:RandVar ?X2:RandVar ?X3:RandVar ?X4:RandVar ?X5:RandVar ?X6:RandVar]

define [Y1 Y2 Y3 Y4 Y5 Y6] := [?Y1:RandVar ?Y2:RandVar ?Y3:RandVar ?Y4:RandVar ?Y5:RandVar ?Y6:RandVar]


# Assert the normal assumptions about the X's and the relationships with the Y's

assert X1_normal := (is-normal (pdf X1))   

assert X2_normal := (is-normal (pdf X2))   

assert X3_normal := (is-normal (pdf X3))   

assert X4_normal := (is-normal (pdf X4))   

assert X5_normal := (is-normal (pdf X5))   

assert X6_normal := (is-normal (pdf X6))   

assert Y1_value :=  (= Y1 (sum X1 X2))

assert Y2_value :=  (= Y2 (sum Y1 X3))

assert Y3_value :=  (= Y3 (sum Y2 X4))

assert Y4_value :=  (= Y4 (sum Y3 X5))
 


#If two distributions are equal, if one is normal, then the other is normal too
assert Equal-distributions-normality :=
 (forall X Y . 
      ((and (X = Y) (is-normal X)) 
        ==> (is-normal Y))
 )



define Y1_normal := (is-normal (pdf Y1))   
conclude Y1_normal 
let{
	X1X2Cramers := (!uspec (!uspec Cramers-Decomposition-Theorem (pdf X1) ) (pdf X2) );
	X1_X2_normal := (!both X1_normal X2_normal);
	X1X2sum := (!uspec (!uspec sum-randVars X1 ) X2 );
	pdfY1ConvX1X2 := (!chain [ (convolution (pdf X1) (pdf X2) )
                             = (pdf (sum X1 X2)) [X1X2sum]
                             = (pdf Y1) [Y1_value]
		             ]);
	ConvoX1X2Norm := (!mp X1X2Cramers X1_X2_normal);
	substitute_law := (!uspec (!uspec Equal-distributions-normality (convolution (pdf X1) (pdf X2) ) ) (pdf Y1) );
    pdfY1ConvX1X2_And_ConvoX1X2Norm := (!both pdfY1ConvX1X2 ConvoX1X2Norm)
}
(!mp substitute_law pdfY1ConvX1X2_And_ConvoX1X2Norm)



define Y2_normal := (is-normal (pdf Y2))   
conclude Y2_normal 
let{
	Y1X3Cramers := (!uspec (!uspec Cramers-Decomposition-Theorem (pdf Y1) ) (pdf X3) );
	Y1_X3_normal := (!both Y1_normal X3_normal);
	Y1X3sum := (!uspec (!uspec sum-randVars Y1 ) X3 );
	pdfY2ConvY1X3 := (!chain [ (convolution (pdf Y1) (pdf X3) )
                             = (pdf (sum Y1 X3)) [Y1X3sum]
                             = (pdf Y2) [Y2_value]
		             ]);
	ConvoY1X3Norm := (!mp Y1X3Cramers Y1_X3_normal);
	substitute_law := (!uspec (!uspec Equal-distributions-normality (convolution (pdf Y1) (pdf X3) ) ) (pdf Y2) );
    pdfY2ConvY1X3_And_ConvoY1X3Norm := (!both pdfY2ConvY1X3 ConvoY1X3Norm)
}
(!mp substitute_law pdfY2ConvY1X3_And_ConvoY1X3Norm)



define Y3_normal := (is-normal (pdf Y3))   
conclude Y3_normal 
let{
	Y2X4Cramers := (!uspec (!uspec Cramers-Decomposition-Theorem (pdf Y2) ) (pdf X4) );
	Y2_X4_normal := (!both Y2_normal X4_normal);
	Y2X4sum := (!uspec (!uspec sum-randVars Y2 ) X4 );
	pdfY3ConvY2X4 := (!chain [ (convolution (pdf Y2) (pdf X4) )
                             = (pdf (sum Y2 X4)) [Y2X4sum]
                             = (pdf Y3) [Y3_value]
		             ]);
	ConvoY2X4Norm := (!mp Y2X4Cramers Y2_X4_normal);
	substitute_law := (!uspec (!uspec Equal-distributions-normality (convolution (pdf Y2) (pdf X4) ) ) (pdf Y3) );
    pdfY3ConvY2X4_And_ConvoY2X4Norm := (!both pdfY3ConvY2X4 ConvoY2X4Norm)
}
(!mp substitute_law pdfY3ConvY2X4_And_ConvoY2X4Norm)



define Y4_normal := (is-normal (pdf Y4))   
conclude Y4_normal 
let{
	Y3X5Cramers := (!uspec (!uspec Cramers-Decomposition-Theorem (pdf Y3) ) (pdf X5) );
	Y3_X5_normal := (!both Y3_normal X5_normal);
	Y3X5sum := (!uspec (!uspec sum-randVars Y3 ) X5 );
	pdfY4ConvY3X5 := (!chain [ (convolution (pdf Y3) (pdf X5) )
                             = (pdf (sum Y3 X5)) [Y3X5sum]
                             = (pdf Y4) [Y4_value]
		             ]);
	ConvoY3X5Norm := (!mp Y3X5Cramers Y3_X5_normal);
	substitute_law := (!uspec (!uspec Equal-distributions-normality (convolution (pdf Y3) (pdf X5) ) ) (pdf Y4) );
    pdfY4ConvY3X5_And_ConvoY3X5Norm := (!both pdfY4ConvY3X5 ConvoY3X5Norm)
}
(!mp substitute_law pdfY4ConvY3X5_And_ConvoY3X5Norm)


# probability of worst-case message delay
define delay_probability :=          
           (= (probability-randVar (sum Y4 X6) c2) 
              (integral-SND (z-score c2 (convolution (pdf Y4) (pdf X6) ) ) ) )

conclude delay_probability
let{
	both_normal := (!both Y4_normal X6_normal);
	uspecRandVar-Theorem1 := (!uspec (!uspec (!uspec RandVar-Theorem1 Y4 ) X6 ) c2)
}
(!mp uspecRandVar-Theorem1 both_normal)