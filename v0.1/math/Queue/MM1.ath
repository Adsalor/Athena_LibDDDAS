#-------------------------------------------------------------------------
# Lines beginning with '#+-' are used to create the hierarchy graph
#+- M/M/1 Queue

#-- Theory of M/M/1 queue from Chapter 3 of "Data Networks", Bertsekar & Gallager (1992) 
#   pdf: https://github.com/paulsaswata/Library/blob/master/files/books/Bertsekas_Gallager_Data_Networks.pdf

load "Athena_LibDDDAS/math/Queue/Queue.ath"

extend-module Queue { 


	#-------------------------  RELEVANT DOMAINS -------------------------  


	#------------------------  RELEVANT FUNCTIONS ------------------------  


	#------------------------  RELEVANT VARIABLES ------------------------  

	define [r] := [?r:Real]

	#-------------------------  RELEVANT THEORY  -------------------------


	#-- MM1 queue has 
	#   1. Exponentially distributed customer arrival rate
	#   2. Exponentially distributed service time
	#   3. 1 server 

	assert MM1-def :=
	(forall Q .
		(
			((qTyp Q) = MM1)
				==>
					(
						  (Dist.isExpo (Random.pdf (cstArRat Q)))
						& (Dist.isExpo (Random.pdf (srvcTm Q)))
						& ((numSrvrs Q) = 1.0)	
					)
		)
	)



	#-- For MM1 queue,  
	# N = lambda / (mu - lambda)
	# Eq. 3.24, pg 168, Bertsekar and Gallager
	# Taking as an axiom for now, will prove in future
	
	assert mean-numCst-axiom :=
	(forall Q .
		(
			((qTyp Q) = MM1)
				==>
					(
						(Dist.mean (Random.pdf (numCst Q)))   # N 
						= ( (Dist.mean (Random.pdf (cstArRat Q)))  #lambda  
							/  
							( (Dist.ratePar (Random.pdf (srvcTm Q))) # mu is ratepar of service time since mean = 1 / mu and service time is exponential 	
							  -
							  (Dist.ratePar (Random.pdf (cstArRat Q))) # lambda
							)
						  )
					)
		)
	)	 


	#-- MM1 queue has 
	#    Exponentially distributed delay per customer
	#    random variable that has mean as T is exponentially distributed
	#    Source: Pg 169, Bertsekar and Gallager 

	assert MM1-cstDly-expo :=
	(forall Q .
		(
			((qTyp Q) = MM1)
				==>
						  (Dist.isExpo (Random.pdf (cstDly Q)))
		)
	)




	#-- THEOREM : Given that the means of the parameters exist as the limits
	#   T = 1 / (mu - lambda), Eq 3.26, pg 169, Bertsekar and Gallager

	define THEOREM-mean-T-value :=
	(forall t Q .
		(
			(	((qTyp Q) = MM1)
			  & ((Dist.mean (Random.pdf (numCst Q))) 
					= (Function.limit t RealExt.INFY (Function.consUF N_ t)) )
			  & ((Dist.mean (Random.pdf (cstArRat Q))) 
			  	= (Function.limit t RealExt.INFY (Function.consUF L_ t)) )
			  & ((Dist.mean (Random.pdf (cstDly Q))) 
			  	= (Function.limit t RealExt.INFY (Function.consUF T_ t)) )		  
			)
			==>
					(
						(Dist.mean (Random.pdf (cstDly Q)))   # T 
						= ( 1.0   
							/  
							( (Dist.ratePar (Random.pdf (srvcTm Q))) # mu	
							  -
							  (Dist.ratePar (Random.pdf (cstArRat Q))) # lambda
							)
						  )
					)
		)	
	)

	conclude THEOREM-mean-T-value
	pick-any t
	pick-any Q 
	assume	
			(	((qTyp Q) = MM1)
			  & ((Dist.mean (Random.pdf (numCst Q))) 
					= (Function.limit t RealExt.INFY (Function.consUF N_ t)) )
			  & ((Dist.mean (Random.pdf (cstArRat Q))) 
			  	= (Function.limit t RealExt.INFY (Function.consUF L_ t)) )
			  & ((Dist.mean (Random.pdf (cstDly Q))) 
			  	= (Function.limit t RealExt.INFY (Function.consUF T_ t)) )		  
			)
	let{
		assum := 
			(	((qTyp Q) = MM1)
			  & ((Dist.mean (Random.pdf (numCst Q))) 
					= (Function.limit t RealExt.INFY (Function.consUF N_ t)) )
			  & ((Dist.mean (Random.pdf (cstArRat Q))) 
			  	= (Function.limit t RealExt.INFY (Function.consUF L_ t)) )
			  & ((Dist.mean (Random.pdf (cstDly Q))) 
			  	= (Function.limit t RealExt.INFY (Function.consUF T_ t)) )		  
			);
		rhs := 	
			(
				(Dist.mean (Random.pdf (cstDly Q)))   # T 
				= ( 1.0   
					/  
					( (Dist.ratePar (Random.pdf (srvcTm Q))) # mu	
					  -
					  (Dist.mean (Random.pdf (cstArRat Q))) # lambda
					)
				  )
			);
		N_d := 	# denominator of N from Eq 3.24
			( (Dist.ratePar (Random.pdf (srvcTm Q))) # mu	
			  -
			  (Dist.ratePar (Random.pdf (cstArRat Q))) # lambda
			);		
		Q-is-mm1 := (!left-and assum);	
		N := (Dist.mean (Random.pdf (numCst Q)));
		L := (Dist.mean (Random.pdf (cstArRat Q)));
		T := (Dist.mean (Random.pdf (cstDly Q)));
		conn-2-Little := (!uspec (!uspec LITTLES-THEOREM t) Q);
		N=LT := (!mp conn-2-Little (!right-and assum)) ;
		conn-2-commu := (!uspec (!uspec RealExt.prod-commutative-axiom T) L);
		N=TL := (!chain [ N
						= (L * T) [N=LT]
						= (T * L) [conn-2-commu]
						]);
		TL=N := (!chain [ (T * L)
						=  N [N=TL]
						]);
		conn-2-a-x-b=c-axiom := (!uspec (!uspec (!uspec RealExt.a-x-b=c-axiom T) L) N);
		T=N-x-inv-L := (!mp (!left-iff (!left-and conn-2-a-x-b=c-axiom)) TL=N);
		conn-2-mean-numCst-axiom := (!uspec mean-numCst-axiom Q);
		N=L-by-N_d := (!mp conn-2-mean-numCst-axiom Q-is-mm1);
		conn-2-a-by-d-x-b-by-a-axiom := (!uspec (!uspec (!uspec RealExt.a-by-d-x-b-by-a-axiom L) N_d) 1.0)
	}		  
	(!chain [ T
			= (N * (1.0 / L)) [T=N-x-inv-L]
			= ((L / N_d) * (1.0 / L)) [N=L-by-N_d]
			= (1.0 / N_d) [conn-2-a-by-d-x-b-by-a-axiom]
			])



	#-- THEOREM : Given that the means of the parameters exist as the limits
	#   this theorem gives the closed for solution of the
	#   rate parameter for the customer delay's distribution

	define THEOREM-cstDly-ratepar=Mu-Lambda :=
	(forall t Q r .
		(
			(	((qTyp Q) = MM1)
			  & ((Dist.mean (Random.pdf (numCst Q))) 
					= (Function.limit t RealExt.INFY (Function.consUF N_ t)) )
			  & ((Dist.mean (Random.pdf (cstArRat Q))) 
			  	= (Function.limit t RealExt.INFY (Function.consUF L_ t)) )
			  & ((Dist.mean (Random.pdf (cstDly Q))) 
			  	= (Function.limit t RealExt.INFY (Function.consUF T_ t)) )		  
			)
			==>
					(
						(Dist.ratePar (Random.pdf (cstDly Q))) 
						= 
						 ( 
						   (Dist.ratePar (Random.pdf (srvcTm Q))) # mu	
						   -
						   (Dist.ratePar (Random.pdf (cstArRat Q))) # lambda
						 )		
					)
		)	
	)

	conclude THEOREM-cstDly-ratepar=Mu-Lambda
	pick-any t
	pick-any Q
	pick-any r:Real  # Wasn't working without the ':Real'. Why ? ? ?
	assume  
			(	((qTyp Q) = MM1)
			  & ((Dist.mean (Random.pdf (numCst Q))) 
					= (Function.limit t RealExt.INFY (Function.consUF N_ t)) )
			  & ((Dist.mean (Random.pdf (cstArRat Q))) 
			  	= (Function.limit t RealExt.INFY (Function.consUF L_ t)) )
			  & ((Dist.mean (Random.pdf (cstDly Q))) 
			  	= (Function.limit t RealExt.INFY (Function.consUF T_ t)) )		  
			)	
	let{
		assum := 
			(	((qTyp Q) = MM1)
			  & ((Dist.mean (Random.pdf (numCst Q))) 
					= (Function.limit t RealExt.INFY (Function.consUF N_ t)) )
			  & ((Dist.mean (Random.pdf (cstArRat Q))) 
			  	= (Function.limit t RealExt.INFY (Function.consUF L_ t)) )
			  & ((Dist.mean (Random.pdf (cstDly Q))) 
			  	= (Function.limit t RealExt.INFY (Function.consUF T_ t)) )		  
			);			
		Q-is-mm1 := (!left-and assum);
		conn-2-THEOREM-mean-T-value := (!uspec (!uspec THEOREM-mean-T-value t) Q);
		T=1-by-mu-L := (!mp conn-2-THEOREM-mean-T-value assum);
		T-dist-mean := (Dist.mean (Random.pdf (cstDly Q)));
		T-dist := (Random.pdf (cstDly Q));
		T-dist-is-expo := (!mp (!uspec MM1-cstDly-expo Q) Q-is-mm1);
		mu-minus-L := 
					 ( 
					   (Dist.ratePar (Random.pdf (srvcTm Q))) # mu	
					   -
					   (Dist.ratePar (Random.pdf (cstArRat Q))) # lambda
					 );
		conn-2-by-1-axiom := (!uspec RealExt.by-1-axiom mu-minus-L);
		conn-2-expo-mean-ratePar := (!mp (!uspec Dist.expo-mean-ratePar T-dist) T-dist-is-expo)
	}
	(!chain [  (Dist.ratePar T-dist)
		    = (1.0 / T-dist-mean) [conn-2-expo-mean-ratePar]
		    =  mu-minus-L [conn-2-by-1-axiom T=1-by-mu-L]
		  ])



	#-- THEOREM : Given that the means of the parameters exist as the limits
	#   this theorem gives the closed for solution of the
	#   probability of message delay being at most a given real r

	define THEOREM-cstDly-prob :=
	(forall t Q r .
		(
			(	((qTyp Q) = MM1)
			  & ((Dist.mean (Random.pdf (numCst Q))) 
					= (Function.limit t RealExt.INFY (Function.consUF N_ t)) )
			  & ((Dist.mean (Random.pdf (cstArRat Q))) 
			  	= (Function.limit t RealExt.INFY (Function.consUF L_ t)) )
			  & ((Dist.mean (Random.pdf (cstDly Q))) 
			  	= (Function.limit t RealExt.INFY (Function.consUF T_ t)) )		  
			)
			==>
					(
						(Prob.probE (Prob.consE Prob.<= (cstDly Q) r))   # T 
						= 
						 (1.0 - 
							(RealExt.pow 
								RealExt.EULER  
								(0.0 - (
										 ( 
										   (Dist.ratePar (Random.pdf (srvcTm Q))) # mu	
										   -
										   (Dist.ratePar (Random.pdf (cstArRat Q))) # lambda
										 )								 

										 * r ) )
							)
						  )	
					)
		)	
	)


	conclude THEOREM-cstDly-prob
	pick-any t
	pick-any Q
	pick-any r
	assume  
			(	((qTyp Q) = MM1)
			  & ((Dist.mean (Random.pdf (numCst Q))) 
					= (Function.limit t RealExt.INFY (Function.consUF N_ t)) )
			  & ((Dist.mean (Random.pdf (cstArRat Q))) 
			  	= (Function.limit t RealExt.INFY (Function.consUF L_ t)) )
			  & ((Dist.mean (Random.pdf (cstDly Q))) 
			  	= (Function.limit t RealExt.INFY (Function.consUF T_ t)) )		  
			)	
	let{
		assum := 
			(	((qTyp Q) = MM1)
			  & ((Dist.mean (Random.pdf (numCst Q))) 
					= (Function.limit t RealExt.INFY (Function.consUF N_ t)) )
			  & ((Dist.mean (Random.pdf (cstArRat Q))) 
			  	= (Function.limit t RealExt.INFY (Function.consUF L_ t)) )
			  & ((Dist.mean (Random.pdf (cstDly Q))) 
			  	= (Function.limit t RealExt.INFY (Function.consUF T_ t)) )		  
			);
		rhs := 
			 (1.0 - 
				(RealExt.pow 
					RealExt.EULER  
					(0.0 - (
							 ( 
							   (Dist.ratePar (Random.pdf (srvcTm Q))) # mu	
							   -
							   (Dist.ratePar (Random.pdf (cstArRat Q))) # lambda
							 )								 

							 * r ) )
				)
			  );			
		Q-is-mm1 := (!left-and assum);
		conn-2-THEOREM-mean-T-value := (!uspec (!uspec THEOREM-mean-T-value t) Q);
		T=1-by-mu-L := (!mp conn-2-THEOREM-mean-T-value assum);
		T-dist-mean := (Dist.mean (Random.pdf (cstDly Q)));
		T-dist := (Random.pdf (cstDly Q));
		T-dist-is-expo := (!mp (!uspec MM1-cstDly-expo Q) Q-is-mm1);
		mu-minus-L := 
					 ( 
					   (Dist.ratePar (Random.pdf (srvcTm Q))) # mu	
					   -
					   (Dist.ratePar (Random.pdf (cstArRat Q))) # lambda
					 );
		conn-2-by-1-axiom := (!uspec RealExt.by-1-axiom mu-minus-L);
		conn-2-expo-mean-ratePar := (!mp (!uspec Dist.expo-mean-ratePar T-dist) T-dist-is-expo);
		T-dist-ratePar := (!chain [  (Dist.ratePar T-dist)
								   = (1.0 / T-dist-mean) [conn-2-expo-mean-ratePar]
								   =  mu-minus-L [conn-2-by-1-axiom T=1-by-mu-L]
								  ]);
		conn-2-expo-cdf := (!uspec (!uspec Dist.expo-cdf (cstDly Q)) r);
		cdf=1-pow-e-ratePar-x := (!mp conn-2-expo-cdf T-dist-is-expo);
		conn-2-cdf-prob-conjecture := (!uspec (!uspec Prob.cdf-prob-conjecture (cstDly Q)) r)
	}
	(!chain [ (Prob.probE (Prob.consE Prob.<= (cstDly Q) r))
			= (Random.cdf (cstDly Q) r) [conn-2-cdf-prob-conjecture]
			= rhs [cdf=1-pow-e-ratePar-x T-dist-ratePar] 
			])

}# end module
