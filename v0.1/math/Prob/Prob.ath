#-------------------------------------------------------------------------
# Lines beginning with '#+-' are used to create the hierarchy graph
#+- Probability

load "Athena_LibDDDAS/math/Random/Random.ath"
load "Athena_LibDDDAS/math/RealExt/RealExt.ath"

module Prob {

	#-------------------------  RELEVANT DOMAINS -------------------------  

	#-- Probability is a function over "events". So we need to define events first

	#-- Domain of all the relationships which can be used to define Event 
	#  Eg. -  We are concerned with relationships like >, <=, etc for 
	#  statistical analysis of random variables

	domain Rel 

	#-- Domain of all events - An event is a set of outcomes which may or may 
	#   not come true. For any relation like <, >=, the associated event can
	#   be that the relation has come true
	#   The consE constructor creates an event with a relationship, rv, and Real 
	#   NOTE: Would have preferred to create a polymorphic datatype, but 
	#   having issue with the Athena syntax

	datatype Event  :=  (consE rel:Rel rv:Random.RandVar rl:Real) # wrt to a single rv
					  | (consErvs rel:Rel rvS:Random.RandVarSet rl:Real) # wrt all in a set of rvs
					  | (cons2E e1:Event e2:Event) #both event e1 and e2 happen

	#-- sets of events

	datatype EventSet := emptyES | (consES EventSet Event)


	#------------------------  RELEVANT FUNCTIONS ------------------------  


	#-- Two events are complementary

	declare complement : [Event Event] -> Boolean	

	#-- Disjoint events

	declare disjoint : [Event Event] -> Boolean		

	#-- get complementary event

	declare get-comp : [Event] -> Event	

	#-- Given an event  [X1 Rel y, X2 Rel y, ...]  
	#   it returns a set of Probabilities [P(X1 Rel y), P(X2 Rel y), ... ]

	declare get-set-probs : [Event] -> RealExt.RealSet		

	#-- Two events are independent

	declare indEvnt : [Event Event] -> Boolean	


	#-- membership opertaor for EventSet

	declare inES: [EventSet Event] -> Boolean 	

	#-- an event happens

	declare happens : [Event] -> Boolean	


	#-- Probability of an event

	declare probE : [Event] -> Real	


	#------------------------  RELEVANT VARIABLES ------------------------  

	#-- The relationship symbols which we will use to define events 
	#   interesting to us 
	declare > , <= , == : Rel

	#-- 

	define [symbl symbl2] := [?symbl:Rel ?symbl2:Rel] 

	define [E1 E2] := [?E1:Event ?E2:Event]

	define [x y] := [?x:Random.RandVar ?y:Random.RandVar]

	define [R R2] := [?R:Real ?R2:Real]

	define [r1 r2] := [?r1:Real ?r2:Real]

	define [rvSet rvSetTail] := [?rvSet:Random.RandVarSet ?rvSetTail:Random.RandVarSet]

	define [rlSet] := [?rlSet:RealExt.RealSet]

	#-------------------------  RELEVANT THEORY  -------------------------

	#-- (Z = X + Y) ==> ((X<=x & Y<=y) ==>  (Z <= x+y))
	#   Property of addition 

	assert sum-implies-axiom :=
	(forall x y z r1 r2 .
		(
			(z = (x Random.+ y))
			==> 
				(	
					(Prob.happens	
						(Prob.cons2E 
							(Prob.consE Prob.<= x r1) 
							(Prob.consE Prob.<= y r2)
						)
					)
					==>
						(Prob.happens	
							(Prob.consE Prob.<= z (r1 + r2)
							) 
						)						
				)
		)
	)


	#-- ind-randvar-evnt-rul states that
	#  if two rvs are independent, then 
	#  the probability of some event happening for the first
	#  is independent of the probability of some event happening for the second

	assert ind-randvar-rul :=
	(forall x y R R2 symbl symbl2 .
		(Random.ind x y) 
			==>	
				(indEvnt
					(consE symbl x R)  
					(consE symbl2 y R2)
				)
	)


	#-- eq-randvar-rul states that
	#  if two rvs are equal, then 
	#  the probability of some event happening for the first
	#  is equal to the probability of some event happening for the second
	#  (X1 = X2) ==> P(X1 _ R) = P(X2 _ R) where _ can be <, <=, >, >= or = 

	assert eq-randvar-rul :=
	(forall x y R symbl .
		(x = y) 
			==>	
				(
					(probE (consE symbl x R)) 
						= 
							(probE (consE symbl y R))
				)
	)


	#-- product-rul states that
	#  if two events are independent, then 
	#  the probability of both happening is 
	#  the product of the probabilities of each happening

	assert product-rul :=
	(forall E1 E2 .
		(indEvnt E1 E2) 
			==>	
				(
					(probE (cons2E E1 E2)) 
						= 
							( (probE E1) * (probE E2) )
				)
	)


# ******************************************************
#  +++++++++++++++++++++++++++++++++++++++++++++++++ NEED TO CHECK THIS
#-------------------------------------------------------
	#-- e1==>e2-prob states that if an event A
	#   implies another event B, then the probability of
	#   B happening is at least the probability of A
	#   happeneing since if A happens, then B must happen
	#   while B can also happen independently of A happening 


	assert e1==>e2-prob :=
	(forall E1 E2 .
		( (happens E1) ==> (happens E2) ) 
			==>	
				(
					(probE E2) 
						>= 
							(probE E1)
				)
	)

	#-- comp-<=-&-> states that 
	#   there is Complementary relationship between 
	#   the > and <= relations

	assert comp-<=-&-> :=
	(forall x R .
		(
			(complement (consE <= x R) (consE > x R))
		)
	)

	#-- comp-2-way states that 
	#   complement is a two-way relation

	assert comp-2-way :=
	(forall E1 E2 .
		(complement E1 E2) <==> (complement E2 E1)
	)

	#-- get-set-probs length axiom 
	#   number of probabilities is equal to number of rvs
	assert get-set-probs-axiom1 :=
	(forall rvSet symbl R .
		(
			(RealExt.lenRS (get-set-probs (consErvs symbl rvSet R)))
			= (Random.lenRVS rvSet)
		)
	)


	#-- get-set-probs composition axiom - 
	#   get-set-probs() returns a list of reals with a defined head and tail
	assert get-set-probs-axiom2 :=
	(forall rvSet y rvSetTail symbl R .
		(
			(get-set-probs (consErvs symbl (Random.consRVS y rvSetTail) R))
			= (RealExt.consRS (probE (consE symbl y R)) (get-set-probs (consErvs symbl rvSetTail R)))
		)
	)	


	#-- get-comp definition
	assert get-comp-axiom :=
	(forall E1 .
		    (complement E1 (get-comp E1))
	)


	#-- complement-rule - Complement Rule states that 
	#   the sum of the probabilities of an event and 
	#   its complement must equal 1

	assert complement-rule :=
	(forall E1 E2 .
		(
			(complement E1 E2) 
				<==>
				( 
					  ((probE E2) = (1.0 - (probE E1)))
				    & ((probE E1) = (1.0 - (probE E2))) 
				)
		)
	)


	#-- cdf-prob-axiom states that 
	#   cdf(X,x) = P(X <= x)

	assert cdf-prob-axiom :=
	(forall x R .
		(
			(Random.cdf x R) = (probE (consE <= x R))
		)
	)



#	#-- evnt-RVS-axiom states that defining an event over an entire set of rvS
#	#   is equal to defining the same event for each rv in the set

#	assert evnt-RVS-axiom :=
#	(forall rvSet R ?symbl:Rel .
#		(
#			(consErvs ?symbl:Rel rvSet R)
#			=
#			 (forall x .
#			 	((Random.inRVS rvSet x)
#			 		==>
#			 			(consE ?symbl:Rel x R)) 
#			 )
#		)
#	)


	#-- p-Min-axiom states that 
	#   P(min[X1,X2...] > y) = P( [X1 > y, X2 > y, ...])

	assert p-Min-axiom :=
	(forall rvSet R .
		(
			(probE (consE > (Random.minRVS rvSet) R))
			=
			(probE (consErvs > rvSet R))
		)
	)




#**************************************************
# TO DO:

# 1. Use "methods" for making the theorems conceise by
# creating functions for repetative proof constructs

# 2. PROVE THEOREM ((Random.cdf x R) = (1.0 - (probE (consE > x R))))
# and ((probE (consE > x R)) = 1.0 - (Random.cdf x R))

#**************************************************



	#-- THEOREM-probability-Comp-Evnts states that 
	#   P(E1) = 1 - P(comp(E1))

	define THEOREM-probability-Comp-Evnts :=
	(forall E1 .  
		(
			(probE E1) 
				= 
					(1.0 - (probE (get-comp E1)))
		)
	)

	conclude THEOREM-probability-Comp-Evnts
	pick-any E1
	let{
		e2 := (get-comp E1);
		is-comp-E1-e2 := (!uspec get-comp-axiom E1); #(complement E1 (get-comp E1))
		two-way-comp-e2-E1 := (!uspec (!uspec comp-2-way E1) e2); #(complement E1 (get-comp E1)) <==> (complement (get-comp E1) E2)
		is-comp-e2-E1 := (!mp (!left-iff two-way-comp-e2-E1) is-comp-E1-e2); #(complement (get-comp E1) E2)
		comp-rul-E1-e2 := (!uspec (!uspec complement-rule E1) e2);
		p-options-comp := (!mp (!left-iff comp-rul-E1-e2) is-comp-E1-e2)
	}
	(!right-and p-options-comp)



	#-- THEOREM-probability-X-<=-&-> states that 
	#   P(X <= y) = 1 - P(X > y)

	define THEOREM-probability-X-<=-&-> :=
	(forall x R .  
		(
			(probE (consE <= x R)) 
				= 
					(1.0 - (probE (consE > x R)))
		)
	)

	conclude THEOREM-probability-X-<=-&-> 
	pick-any x
	pick-any R 
	let{
		e1 :=  (consE <= x R);
		e2 :=  (consE > x R);
		is-complement := (!uspec (!uspec comp-<=-&-> x) R);
		comp-rul := (!left-iff (!uspec (!uspec complement-rule e1) e2))
	}
	(!right-and (!mp comp-rul is-complement))


	#-- THEOREM-probability-X-<=-&-> states that 
	#   P(X > y) = 1 - P(X <= y)

	define THEOREM-probability-X->-&-<= :=
	(forall x R .  
		(
			(probE (consE > x R)) 
				= 
					(1.0 - (probE (consE <= x R)))
		)
	)

	conclude THEOREM-probability-X->-&-<=
	pick-any x
	pick-any R 
	let{
		e1 :=  (consE <= x R);
		e2 :=  (consE > x R);
		is-complement := (!uspec (!uspec comp-<=-&-> x) R);
		comp-rul := (!left-iff (!uspec (!uspec complement-rule e1) e2))
	}
	(!left-and (!mp comp-rul is-complement))	



	#-- THEOREM-probability-MIN-<=-&-> states that 
	#   P(min[X1,X2,...] <= y) = 1 - P(min[X1,X2,...] > y)

	define THEOREM-probability-MIN-<=-&-> :=
	(forall rvSet R .  
		(
			(probE (consE <= (Random.minRVS rvSet) R)) 
				= 
					(1.0 - (probE (consE > (Random.minRVS rvSet) R)))
		)
	)

	conclude THEOREM-probability-MIN-<=-&-> 
	pick-any rvSet
	pick-any R 
	let{
		min := (Random.minRVS rvSet);
		e1 :=  (consE <= min R);
		e2 :=  (consE > min R);
		is-complement := (!uspec (!uspec comp-<=-&-> min) R);
		comp-rul := (!left-iff (!uspec (!uspec complement-rule e1) e2))
	}
	(!right-and (!mp comp-rul is-complement))



} # end module	