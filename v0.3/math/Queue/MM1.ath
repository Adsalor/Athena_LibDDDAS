#-------------------------------------------------------------------------
# Lines beginning with '#+-' are used to create the hierarchy graph
#+- M/M/1 Queue

#-- Theory of M/M/1 queue from Chapter 3 of "Data Networks", Bertsekar & Gallager (1992) 
#   pdf: https://github.com/paulsaswata/Library/blob/master/files/books/Bertsekas_Gallager_Data_Networks.pdf

load "Athena_LibDDDAS/math/Queue/Queue.ath"
load "Athena_LibDDDAS/math/Prob/PrbRv.ath"

extend-module Queue { 


	#-------------------------  RELEVANT DOMAINS -------------------------  


	#------------------------  RELEVANT FUNCTIONS ------------------------  

	#------------------------  RELEVANT VARIABLES ------------------------  

	define [r n] := [?r:Real ?n.Real]

	#-------------------------  RELEVANT THEORY  -------------------------


	#-- MM1 queue has 
	#   1. Exponentially distributed customer arrival rate
	#   2. Exponentially distributed service time
	#   3. 1 server 

	assert MM1-def :=
	(forall Q .
		(
			((qTyp Q) = MM1)
				==>
					(
						  (Dist.isExpo (Random.pdf (cstArRat Q)))
						& (Dist.isExpo (Random.pdf (srvcTm Q)))
						& ((numSrvrs Q) = 1.0)	
					)
		)
	)

	# needed for intermediate MM1 proofs
	# technically this should be an extra condition of the queueing theory
	# informally, the queue is used in KP and KP has a finite amount of messages
	# so in the limit (as time approaches infinity) the mean of customer arrival rate 
	# to the queue approaches 0, and so it must be less than the service time
	assert MM1-never-overloads :=
	(forall Q . 
		(
			((qTyp Q) = MM1) ==>
			((Dist.mean (Random.pdf (cstArRat Q))) < (Dist.ratePar (Random.pdf (srvcTm Q)))) &
			((Dist.mean (Random.pdf (cstArRat Q))) > 0.0) &
			((Dist.ratePar (Random.pdf (srvcTm Q))) > 0.0)
		)
	)

	define MM1-rho<1 :=
	(forall Q .
		(
			((qTyp Q) = MM1) ==>
			let {rho := ((Dist.mean (Random.pdf (cstArRat Q))) / (Dist.ratePar (Random.pdf (srvcTm Q))))}
			rho < 1.0
		)
	)
	(!force MM1-rho<1)

	define MM1-rho>0 :=
	(forall Q .
		(
			((qTyp Q) = MM1) ==>
			let {rho := ((Dist.mean (Random.pdf (cstArRat Q))) / (Dist.ratePar (Random.pdf (srvcTm Q))))}
			rho > 0.0
		)
	)
	(!force MM1-rho>0)

	#-- For MM1 queue, mean number of customers = expected number of customers in queue
	# which is weighted average of all states
	define expected-numCst :=
	(forall Q .
		(
			((qTyp Q) = MM1) ==>
				((Dist.mean (Random.pdf (numCst Q))) # N
				= (RealExt.summation 0.0 RealExt.INFY n (n * (Prob.probE (Prob.consE Prob.== (numCst Q) n))))))
	)
	(!force expected-numCst)

	#-- For MM1 queue, probability of n customers = probability of 0 customers * (rho^n)
	# where rho is lambda / mu
	# follows from induction and p_n lambda = p_(n+1) mu
	# but induction over reals wouldn't work here and type sig has to be reals bc it's a randvar
	# so it's defined for now
	define MM1-prob-n-cst :=
	(forall Q n . 
		(((qTyp Q) = MM1) ==>
		let {rho := ((Dist.mean (Random.pdf (cstArRat Q))) / (Dist.ratePar (Random.pdf (srvcTm Q))))}
		((Prob.probE (Prob.consE Prob.== (numCst Q) n)) 
		= ((Prob.probE (Prob.consE Prob.== (numCst Q) 0.0)) * (RealExt.pow rho n))))
	)
	(!force MM1-prob-n-cst)

	# the queue exists and each customer state is distinct
	# so they are disjoint events and cover every possibility
	# therefore sum to 1
	define MM1-universal-prob :=
	(forall Q n .
		(((qTyp Q) = MM1) ==>
		(RealExt.summation 0.0 RealExt.INFY n (Prob.probE (Prob.consE Prob.== (numCst Q) n))) = 1.0))
	(!force MM1-universal-prob)

	# in an MM1 queue, the probability that there are 0 customers is equal to 1.0 - rho
	# where rho is the utilization factor lambda / mu
	# lambda = arrival rate
	# mu = service rate
	define MM1-rho-p0 :=
	(forall Q .
		(((qTyp Q) = MM1) ==>
		let {rho := ((Dist.mean (Random.pdf (cstArRat Q))) / (Dist.ratePar (Random.pdf (srvcTm Q))))}
		((Prob.probE (Prob.consE Prob.== (numCst Q) 0.0)) = (1.0 - rho))))
	
	define tmp-MM1 :=
	(forall Q n .
		(((qTyp Q) = MM1) ==>
		let {rho := ((Dist.mean (Random.pdf (cstArRat Q))) / (Dist.ratePar (Random.pdf (srvcTm Q))))}
		((RealExt.summation 0.0 RealExt.INFY n (Prob.probE (Prob.consE Prob.== (numCst Q) n))) = 
		((Prob.probE (Prob.consE Prob.== (numCst Q) 0.0)) / (1.0 - rho)))
		)
	)
	(!force tmp-MM1)

	#conclude tmp-MM1
		# [
		# 			(RealExt.summation 0.0 RealExt.INFY n (Prob.probE (Prob.consE Prob.== (numCst Q) n)))
		# 		  = (RealExt.summation 0.0 RealExt.INFY n ((Prob.probE (Prob.consE Prob.== (numCst Q) 0.0)) * (RealExt.pow rho n))) [MM1-prob-n-cst]
		# 		  = ((Prob.probE (Prob.consE Prob.== (numCst Q) 0.0)) * (RealExt.summation 0.0 RealExt.INFY n (RealExt.pow rho n))) [RealExt.summation-times-distributive-axiom]
		# 		  = ((Prob.probE (Prob.consE Prob.== (numCst Q) 0.0)) * (1.0 / (1.0 - rho))) [RealExt.power-sum-axiom]
		# 		  = ((Prob.probE (Prob.consE Prob.== (numCst Q) 0.0)) / (1.0 - rho)) [RealExt.prod-commutative-axiom RealExt.a-by-b-axiom]
		# 	]

	conclude MM1-rho-p0
		let {temp :=
			pick-any Q n
			assume ((qTyp Q) = MM1)
			let {rho := ((Dist.mean (Random.pdf (cstArRat Q))) / (Dist.ratePar (Random.pdf (srvcTm Q))));
				p0 := (Prob.probE (Prob.consE Prob.== (numCst Q) 0.0));
				rho<1 := (!mp (!uspec MM1-rho<1 Q) ((qTyp Q) = MM1));
				rho>0 := (!mp (!uspec MM1-rho>0 Q) ((qTyp Q) = MM1));
				sum-to-inf-1 := (!mp (!uspec* MM1-universal-prob [Q n]) ((qTyp Q) = MM1));
				1=p0/1-rho := (!chain-last [sum-to-inf-1
						==> ((p0 / (1.0 - rho)) = 1.0) [tmp-MM1]]);
				1-rho-neq-0 := (!chain-last [rho<1
						==> (0.0 + rho < 1.0) [RealExt.sum-identity-axiom]
						==> (0.0 < (1.0 - rho)) [RealExt.additive-swap-axiom]
						==> (not (0.0 = (1.0 - rho))) [RealExt.<-not-=]
						==> (not (= (1.0 - rho) 0.0)) [sym]]);
				a-x-b=c-1 := (!mp (!uspec* RealExt.a-x-b=c-axiom [1.0 (1.0 - rho) p0]) 1-rho-neq-0)}
			(!chain-last [1=p0/1-rho
					==> (1.0 = (p0 / (1.0 - rho))) [sym]
					==> (1.0 = ((1.0 / (1.0 - rho)) * p0)) [RealExt.a-by-b-axiom]
					==> (1.0 = (p0 * (1.0 / (1.0 - rho)))) [RealExt.prod-commutative-axiom]
					==> ((1.0 * (1.0 - rho)) = p0) [a-x-b=c-1]
					==> ((1.0 - rho) = p0) [RealExt.prod-commutative-axiom RealExt.prod-identity-axiom]
					==> (p0 = (1.0 - rho)) [sym]])}
		pick-any Q
			assume ((qTyp Q) = MM1)
				(!uspec* temp [Q 0.0])

	#-- For MM1 queue,  
	# N = lambda / (mu - lambda)
	# Eq. 3.24, pg 168, Bertsekar and Gallager
	# Taking as an axiom for now, will prove in future
	
	define mean-numCst-axiom :=
	(forall Q .
		(
			((qTyp Q) = MM1)
				==>
					(
						(Dist.mean (Random.pdf (numCst Q)))   # N 
						= ( (Dist.mean (Random.pdf (cstArRat Q)))  #lambda  
							/  
							( (Dist.ratePar (Random.pdf (srvcTm Q))) # mu is ratepar of service time since mean = 1 / mu and service time is exponential 	
							  -
							  (Dist.ratePar (Random.pdf (cstArRat Q))) # lambda
							)
						  )
					)
		)
	)	 
	
	conclude mean-numCst-axiom
		pick-any Q
			assume ((qTyp Q) = MM1)
			let {Lambda := (Dist.mean (Random.pdf (cstArRat Q)));
				mu := (Dist.ratePar (Random.pdf (srvcTm Q)));
				rho := (Lambda / mu)}
			(!chain [(Dist.mean (Random.pdf (numCst Q)))
					= (RealExt.summation 0.0 RealExt.INFY n (n * (Prob.probE (Prob.consE Prob.== (numCst Q) n)))) [expected-numCst]
					= (RealExt.summation 0.0 RealExt.INFY n (n * ((Prob.probE (Prob.consE Prob.== (numCst Q) 0.0)) * (RealExt.pow rho n)))) [MM1-prob-of-n-cst]
					= (RealExt.summation 0.0 RealExt.INFY n ((Prob.probE (Prob.consE Prob.== (numCst Q) 0.0)) * (n * (RealExt.pow rho n)))) [RealExt.prod-associative-axiom RealExt.prod-commutative-axiom]
					= ((Prob.probE (Prob.consE Prob.== (numCst Q) 0.0)) * (RealExt.summation 0.0 RealExt.INFY n (n * (RealExt.pow rho n)))) [RealExt.summation-times-distributive-axiom]
					= (Lambda / (mu - Lambda)) [force]])


	#-- MM1 queue has 
	#    Exponentially distributed delay per customer
	#    random variable that has mean as T is exponentially distributed
	#    Source: Pg 169, Bertsekar and Gallager 

	assert MM1-cstDly-expo :=
	(forall Q .
		(
			((qTyp Q) = MM1)
				==>
						  (Dist.isExpo (Random.pdf (cstDly Q)))
		)
	)




	#-- THEOREM : Given that the means of the parameters exist as the limits
	#   T = 1 / (mu - lambda), Eq 3.26, pg 169, Bertsekar and Gallager

	define THEOREM-mean-T-value :=
	(forall t Q .
		(not (= t 0.0))
			==>		
			(
				(	((qTyp Q) = MM1)
				  & ((Dist.mean (Random.pdf (numCst Q))) 
						= (Function.limit t RealExt.INFY (Function.consUF N_ t)) )
				  & ((Dist.mean (Random.pdf (cstArRat Q))) 
				  	= (Function.limit t RealExt.INFY (Function.consUF L_ t)) )
				  & ((Dist.mean (Random.pdf (cstDly Q))) 
				  	= (Function.limit t RealExt.INFY (Function.consUF T_ t)) )		  
				)
				==>
						(
							(Dist.mean (Random.pdf (cstDly Q)))   # T 
							= ( 1.0   
								/  
								( (Dist.ratePar (Random.pdf (srvcTm Q))) # mu	
								  -
								  (Dist.ratePar (Random.pdf (cstArRat Q))) # lambda
								)
							  )
						)
			)	
	)

	#-- some extra assumptions required for the proofs
	#-- Denominators of the equations cannot be zero
	assert MM1-denominators-not-zero :=
	(forall Q .
		(
			((qTyp Q) = MM1)
				==>
					(
						  (not (= (Dist.mean (Random.pdf (cstArRat Q))) 0.0))
						& (not (= ((Dist.ratePar (Random.pdf (srvcTm Q))) - (Dist.ratePar (Random.pdf (cstArRat Q)))) 0.0))	# mu - lambda						
					)
		)
	)	

	#-- The values that appear as denominators in intermediate steps are not zero
	assert MM1-intermediate-denominators-not-zero :=
	(forall Q .
		(
			((qTyp Q) = MM1)
				==>
					(
						  (not (= (Dist.mean (Random.pdf (cstDly Q))) 0.0)) # T
						& (not (= (Dist.mean (Random.pdf (cstArRat Q))) 0.0)) # L
					)
		)
	)

	conclude THEOREM-mean-T-value
	pick-any t
	pick-any Q
	assume (not (= t 0.0))	 
	assume	
			(	((qTyp Q) = MM1)
			  & ((Dist.mean (Random.pdf (numCst Q))) 
					= (Function.limit t RealExt.INFY (Function.consUF N_ t)) )
			  & ((Dist.mean (Random.pdf (cstArRat Q))) 
			  	= (Function.limit t RealExt.INFY (Function.consUF L_ t)) )
			  & ((Dist.mean (Random.pdf (cstDly Q))) 
			  	= (Function.limit t RealExt.INFY (Function.consUF T_ t)) )		  
			)
	let{
		assum := 
			(	((qTyp Q) = MM1)
			  & ((Dist.mean (Random.pdf (numCst Q))) 
					= (Function.limit t RealExt.INFY (Function.consUF N_ t)) )
			  & ((Dist.mean (Random.pdf (cstArRat Q))) 
			  	= (Function.limit t RealExt.INFY (Function.consUF L_ t)) )
			  & ((Dist.mean (Random.pdf (cstDly Q))) 
			  	= (Function.limit t RealExt.INFY (Function.consUF T_ t)) )		  
			);
		N_d := 	# denominator of N from Eq 3.24
			( (Dist.ratePar (Random.pdf (srvcTm Q))) # mu	
			  -
			  (Dist.ratePar (Random.pdf (cstArRat Q))) # lambda
			);		
		Q-is-mm1 := (!left-and assum);	
		N := (Dist.mean (Random.pdf (numCst Q)));
		L := (Dist.mean (Random.pdf (cstArRat Q)));
		T := (Dist.mean (Random.pdf (cstDly Q)));
		t-not-zero := (not (= t 0.0));
		T-L-not-zero := (!mp (!uspec MM1-intermediate-denominators-not-zero Q)  Q-is-mm1);
		L-Not-0 := (!left-and (!mp (!uspec MM1-denominators-not-zero Q) Q-is-mm1));
		N_d-Not-0 := (!right-and (!mp (!uspec MM1-denominators-not-zero Q) Q-is-mm1));
		L-Not-0+N_d-Not-0 := (!both L-Not-0 N_d-Not-0);
		conn-2-Little := (!uspec (!uspec LITTLES-THEOREM t) Q);
		conn-2-Little-conclusion := (!mp conn-2-Little t-not-zero);
		N=LT := (!mp conn-2-Little-conclusion (!right-and assum)) ;
		conn-2-commu := (!uspec (!uspec RealExt.prod-commutative-axiom T) L);
		N=TL := (!chain [ N
						= (L * T) [N=LT]
						= (T * L) [conn-2-commu]
						]);
		TL=N := (!chain [ (T * L)
						=  N [N=TL]
						]);
		conn-2-a-x-b=c-axiom := (!uspec (!uspec (!uspec RealExt.a-x-b=c-axiom T) L) N);
		conn-2-a-x-b=c-axiom-conclusion := (!mp conn-2-a-x-b=c-axiom (!right-and T-L-not-zero));
		T=N-x-inv-L := (!mp (!left-iff conn-2-a-x-b=c-axiom-conclusion) TL=N);
		conn-2-mean-numCst-axiom := (!uspec mean-numCst-axiom Q);
		N=L-by-N_d := (!mp conn-2-mean-numCst-axiom Q-is-mm1);
		conn-2-a-by-d-x-b-by-a-axiom := (!mp (!uspec (!uspec (!uspec RealExt.a-by-d-x-b-by-a-axiom L) N_d) 1.0) L-Not-0+N_d-Not-0)
	}		  
	(!chain [ T
			= (N * (1.0 / L)) [T=N-x-inv-L]
			= ((L / N_d) * (1.0 / L)) [N=L-by-N_d]
			= (1.0 / N_d) [conn-2-a-by-d-x-b-by-a-axiom]
			])




	#-- THEOREM : Given that the means of the parameters exist as the limits
	#   this theorem gives the closed for solution of the
	#   rate parameter for the customer delay's distribution

	define THEOREM-cstDly-ratepar=Mu-Lambda :=
	(forall t Q r .
		(not (= t 0.0))
			==>		
			(
				(	((qTyp Q) = MM1)
				  & ((Dist.mean (Random.pdf (numCst Q))) 
						= (Function.limit t RealExt.INFY (Function.consUF N_ t)) )
				  & ((Dist.mean (Random.pdf (cstArRat Q))) 
				  	= (Function.limit t RealExt.INFY (Function.consUF L_ t)) )
				  & ((Dist.mean (Random.pdf (cstDly Q))) 
				  	= (Function.limit t RealExt.INFY (Function.consUF T_ t)) )		  
				)
				==>
						(
							(Dist.ratePar (Random.pdf (cstDly Q))) 
							= 
							 ( 
							   (Dist.ratePar (Random.pdf (srvcTm Q))) # mu	
							   -
							   (Dist.ratePar (Random.pdf (cstArRat Q))) # lambda
							 )		
						)
			)	
	)

	conclude THEOREM-cstDly-ratepar=Mu-Lambda
	pick-any t
	pick-any Q
	pick-any r:Real  # Wasn't working without the ':Real'. Why ? ? ?
	assume	(not (= t 0.0))	
	assume  
			(	((qTyp Q) = MM1)
			  & ((Dist.mean (Random.pdf (numCst Q))) 
					= (Function.limit t RealExt.INFY (Function.consUF N_ t)) )
			  & ((Dist.mean (Random.pdf (cstArRat Q))) 
			  	= (Function.limit t RealExt.INFY (Function.consUF L_ t)) )
			  & ((Dist.mean (Random.pdf (cstDly Q))) 
			  	= (Function.limit t RealExt.INFY (Function.consUF T_ t)) )		  
			)	
	let{
		assum := 
			(	((qTyp Q) = MM1)
			  & ((Dist.mean (Random.pdf (numCst Q))) 
					= (Function.limit t RealExt.INFY (Function.consUF N_ t)) )
			  & ((Dist.mean (Random.pdf (cstArRat Q))) 
			  	= (Function.limit t RealExt.INFY (Function.consUF L_ t)) )
			  & ((Dist.mean (Random.pdf (cstDly Q))) 
			  	= (Function.limit t RealExt.INFY (Function.consUF T_ t)) )		  
			);			
		Q-is-mm1 := (!left-and assum);
		t-not-zero :=	(not (= t 0.0));		
		conn-2-THEOREM-mean-T-value := (!uspec (!uspec THEOREM-mean-T-value t) Q);
		conn-2-THEOREM-mean-T-value-conclusion := (!mp conn-2-THEOREM-mean-T-value t-not-zero);
		T=1-by-mu-L := (!mp conn-2-THEOREM-mean-T-value-conclusion assum);
		T-dist-mean := (Dist.mean (Random.pdf (cstDly Q)));
		T-dist := (Random.pdf (cstDly Q));
		T-dist-is-expo := (!mp (!uspec MM1-cstDly-expo Q) Q-is-mm1);
		mu-minus-L := 
					 ( 
					   (Dist.ratePar (Random.pdf (srvcTm Q))) # mu	
					   -
					   (Dist.ratePar (Random.pdf (cstArRat Q))) # lambda
					 );
		mu-minus-L-Not-0 := (!right-and (!mp (!uspec MM1-denominators-not-zero Q) Q-is-mm1));			 
		conn-2-by-1-axiom := (!uspec RealExt.by-1-axiom mu-minus-L);
		conn-2-by-1-axiom-conclusion := (!mp conn-2-by-1-axiom mu-minus-L-Not-0);
		conn-2-expo-mean-ratePar := (!mp (!uspec Dist.expo-mean-ratePar T-dist) T-dist-is-expo)
	}
	(!chain [  (Dist.ratePar T-dist)
		    = (1.0 / T-dist-mean) [conn-2-expo-mean-ratePar]
		    =  mu-minus-L [conn-2-by-1-axiom-conclusion T=1-by-mu-L]
		  ])



	#-- THEOREM : Given that the means of the parameters exist as the limits
	#   this theorem gives the closed for solution of the
	#   probability of message delay being at most a given real r

	define THEOREM-cstDly-prob :=
	(forall t Q r .
		(not (= t 0.0))
			==>			
			(
				(	((qTyp Q) = MM1)
				  & ((Dist.mean (Random.pdf (numCst Q))) 
						= (Function.limit t RealExt.INFY (Function.consUF N_ t)) )
				  & ((Dist.mean (Random.pdf (cstArRat Q))) 
				  	= (Function.limit t RealExt.INFY (Function.consUF L_ t)) )
				  & ((Dist.mean (Random.pdf (cstDly Q))) 
				  	= (Function.limit t RealExt.INFY (Function.consUF T_ t)) )		  
				)
				==>
						(
							(Prob.probE (Prob.consE Prob.<= (cstDly Q) r))   # T 
							= 
							 (1.0 - 
								(RealExt.pow 
									RealExt.EULER  
									(0.0 - (
											 ( 
											   (Dist.ratePar (Random.pdf (srvcTm Q))) # mu	
											   -
											   (Dist.ratePar (Random.pdf (cstArRat Q))) # lambda
											 )								 

											 * r ) )
								)
							  )	
						)
			)	
	)


	conclude THEOREM-cstDly-prob
	pick-any t
	pick-any Q
	pick-any r
	assume	(not (= t 0.0))		
	assume  
			(	((qTyp Q) = MM1)
			  & ((Dist.mean (Random.pdf (numCst Q))) 
					= (Function.limit t RealExt.INFY (Function.consUF N_ t)) )
			  & ((Dist.mean (Random.pdf (cstArRat Q))) 
			  	= (Function.limit t RealExt.INFY (Function.consUF L_ t)) )
			  & ((Dist.mean (Random.pdf (cstDly Q))) 
			  	= (Function.limit t RealExt.INFY (Function.consUF T_ t)) )		  
			)	
	let{
		assum := 
			(	((qTyp Q) = MM1)
			  & ((Dist.mean (Random.pdf (numCst Q))) 
					= (Function.limit t RealExt.INFY (Function.consUF N_ t)) )
			  & ((Dist.mean (Random.pdf (cstArRat Q))) 
			  	= (Function.limit t RealExt.INFY (Function.consUF L_ t)) )
			  & ((Dist.mean (Random.pdf (cstDly Q))) 
			  	= (Function.limit t RealExt.INFY (Function.consUF T_ t)) )		  
			);
		rhs := 
			 (1.0 - 
				(RealExt.pow 
					RealExt.EULER  
					(0.0 - (
							 ( 
							   (Dist.ratePar (Random.pdf (srvcTm Q))) # mu	
							   -
							   (Dist.ratePar (Random.pdf (cstArRat Q))) # lambda
							 )								 

							 * r ) )
				)
			  );			
		t-not-zero :=	(not (= t 0.0));			 
		Q-is-mm1 := (!left-and assum);
		conn-2-THEOREM-mean-T-value := (!uspec (!uspec THEOREM-mean-T-value t) Q);
		conn-2-THEOREM-mean-T-value-conclusion := (!mp conn-2-THEOREM-mean-T-value t-not-zero);
		T=1-by-mu-L := (!mp conn-2-THEOREM-mean-T-value-conclusion assum);
		T-dist-mean := (Dist.mean (Random.pdf (cstDly Q)));
		T-dist := (Random.pdf (cstDly Q));
		T-dist-is-expo := (!mp (!uspec MM1-cstDly-expo Q) Q-is-mm1);
		mu-minus-L := 
					 ( 
					   (Dist.ratePar (Random.pdf (srvcTm Q))) # mu	
					   -
					   (Dist.ratePar (Random.pdf (cstArRat Q))) # lambda
					 );
		mu-minus-L-Not-0 := (!right-and (!mp (!uspec MM1-denominators-not-zero Q) Q-is-mm1));			 
		conn-2-by-1-axiom := (!uspec RealExt.by-1-axiom mu-minus-L);
		conn-2-by-1-axiom-conclusion := (!mp conn-2-by-1-axiom mu-minus-L-Not-0);
		conn-2-expo-mean-ratePar := (!mp (!uspec Dist.expo-mean-ratePar T-dist) T-dist-is-expo);
		T-dist-ratePar := (!chain [  (Dist.ratePar T-dist)
								   = (1.0 / T-dist-mean) [conn-2-expo-mean-ratePar]
								   =  mu-minus-L [conn-2-by-1-axiom-conclusion T=1-by-mu-L]
								  ]);
		conn-2-expo-cdf := (!uspec (!uspec Dist.expo-cdf (cstDly Q)) r);
		cdf=1-pow-e-ratePar-x := (!mp conn-2-expo-cdf T-dist-is-expo);
		conn-2-cdf-prob := (!uspec (!uspec Prob.cdf-prob (cstDly Q)) r)
	}
	(!chain [ (Prob.probE (Prob.consE Prob.<= (cstDly Q) r))
			= (Random.cdf (cstDly Q) r) [conn-2-cdf-prob]
			= rhs [cdf=1-pow-e-ratePar-x T-dist-ratePar] 
			])

}# end module
