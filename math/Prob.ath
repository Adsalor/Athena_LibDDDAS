load "CharFun.ath"
load "RealExt.ath"

#-------------------------------------------------------------------------
#-- Theories of probability

module Prob {



	#-------------------------  RELEVANT DOMAINS -------------------------  


	#------------------------  RELEVANT FUNCTIONS ------------------------  

	#-- An integral function that computes the real integral of cumulative distribution function of a standard normal distribution by taking the real z-score as input (undefined for now)

	declare integral-SND : [Real] -> Real

	#-- A probabiliity function that takes in a normal distribution Z and a Real T, and returns the probability-Dist<=c that a random variable that lies in Z will be at most some real T. It returns zero if the distribution is not normal.   
	#-- If need be, we can overload the probability-Dist<=c function according to different input cases

	declare probability-Dist<=c : [CharFun.Dist Real]-> Real

	#-- A function that computes the z-score of a value T wrt a normal distribution Z. It returns zero if the distribution is not normal.

	declare z-score : [Real CharFun.Dist] -> Real


	#------------------------  RELEVANT VARIABLES ------------------------  

	define [t T] := [?t:Real ?T:Real]

	define [X Y Z] := [?X:CharFun.Dist ?Y:CharFun.Dist ?Z:CharFun.Dist]
	

	#-------------------------  RELEVANT THEORY  -------------------------	

	assert z-score-axioms :=
	   let{
	        mean := (CharFun.mean Z);
	       stdev := (RealExt.sqrt (CharFun.var Z));
	      compute := (/ (- T mean) stdev)
	      }
	(fun
	[(z-score T Z) =
	  [ 0.0 when (~(CharFun.is-norm Z))
	    compute when (CharFun.is-norm Z)
	  ]  
	]) 

	define [z-score-Z-not-normal z-score-result] := z-score-axioms


	assert probability-Dist<=c-axioms :=
	   let{
	       score := (z-score T Z);
	       integral := (integral-SND score)
	   }
	(fun
	[(probability-Dist<=c Z T) =
	   [ 0.0 when (~(CharFun.is-norm Z))
	     integral when (CharFun.is-norm Z)
	   ]
	])  

	define [probability-Dist<=c-ZNotNorm probability-Dist<=c-ZNorm] := probability-Dist<=c-axioms


	#-- THEOREM-probability-Conv2NormDist<=c states that if two distributions X and Y are normal, then the probability that a random variable that lies in the convolution of X and Y will be at most some real T will be the integral of the SND upto the z score of T wrt the convolution of X and Y

	define THEOREM-probability-Conv2NormDist<=c :=
	(
	forall X Y T .  
	(
	    (and (CharFun.is-norm X) (CharFun.is-norm Y) ) ==>
	    (= (probability-Dist<=c (CharFun.convo X Y) T)
	       (integral-SND (z-score T (CharFun.convo X Y) ) ) )
	)
	)

	conclude THEOREM-probability-Conv2NormDist<=c
	pick-any x:CharFun.Dist
	pick-any y:CharFun.Dist
	pick-any t:Real
	assume (and (CharFun.is-norm x) (CharFun.is-norm y))
	let{
	    xyNormal := (and (CharFun.is-norm x) (CharFun.is-norm y)); 
		xyCramers := (!uspec (!uspec CharFun.THEOREM-Cramers-Decomposition x) y);
		xPlusyNormal := (!mp xyCramers xyNormal);
		txPlusyProbability := (!uspec (!uspec probability-Dist<=c-ZNorm t) (CharFun.convo x y) )
	}
	(!mp txPlusyProbability xPlusyNormal) 

} # end module	