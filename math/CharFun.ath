#-------------------------------------------------------------------------
#-- Theories of Charecteristic Functions and Distributions
#-- Author: Samual Breese (sometime early 2019)

module CharFun {



	#-------------------------  RELEVANT DOMAINS -------------------------  

	#-- Declaring a datatype CF about Charecteristic Functions
	#-- NormalCF is the constructor for datatype CF and OtherCF is the base case

	(datatype CF (NormalCF Real Real) OtherCF)


# ****************************************************************
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#-- DISTRIBUTIONS NEED TO BE IN A SEPARATE MODULE
# ****************************************************************
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

	#-- Dist is the set of all distributions  
	(domain Dist)


	#------------------------  RELEVANT FUNCTIONS ------------------------  

	#-- charecteristic-fuction takes a distribution ad returns its CF

	(declare charFun (-> (Dist) CF))

	#-- convotakes two distributions and returns their linear combination

	(declare convo (-> (Dist Dist) Dist))

	#-- is-norm takes a distribution and returns True iff it is a normal distribution

	(declare is-norm (-> (Dist) Boolean))

	#-- mean takes a distribution and returns its real mean

	(declare mean (-> (Dist) Real))

	#-- mul-cf takes two normal CFs and creates a new normal CF 

	(declare mul-cf (-> (CF CF) CF))

	#-- var takes a distribution and returns its real variance

	(declare var (-> (Dist) Real))


	#------------------------  RELEVANT VARIABLES ------------------------  

	

	#-------------------------  RELEVANT THEORY  -------------------------	

	(define mul-cf-normal
	  (forall ?m1:Real
	    (forall ?v1:Real
	      (forall ?m2:Real
	        (forall ?v2:Real
	          (= (mul-cf (NormalCF ?m1:Real ?v1:Real) (NormalCF ?m2:Real ?v2:Real))
	             (NormalCF (+ ?m1:Real ?m2:Real) (+ ?v1:Real ?v2:Real))))))))
	(assert mul-cf-normal)


	#-- normal-cf-forward states that if x is a normal distribution, then its CF can be expressed by using its real mean and var

	(define normal-cf-forward
	  (forall ?x:Dist
	    (if (is-norm ?x:Dist)
	        (= (charFun ?x:Dist)
	           (NormalCF (mean ?x:Dist) (var ?x:Dist))))))

	#-- normal-cf-backward states that if the CF of a distribution are expressed using its real mean and var, then it is a normal distribution

	(define normal-cf-backward
	  (forall ?x:Dist
	    (if (= (charFun ?x:Dist)
	           (NormalCF (mean ?x:Dist) (var ?x:Dist)))
	        (is-norm ?x:Dist))))

	#-- normal-cf-mean-var states that if the CF of a distribution is expressed using reals, then the mean and var can be extracted from it  ????????????????? --- how do you claim this? 

	(define normal-cf-mean-var
	  (forall ?x:Dist
	    (forall ?m:Real
	      (forall ?v:Real
	        (if (= (charFun ?x:Dist)
	               (NormalCF ?m:Real ?v:Real))
	            (and (= (mean ?x:Dist) ?m:Real)
	                 (= (var ?x:Dist) ?v:Real)))))))

	(assert normal-cf-forward)
	(assert normal-cf-backward)
	(assert normal-cf-mean-var)

	#-- normal-cf-sum states that the CF of the convoof xCramersy distributions can be obtained by the linear combination of the CFs of the xCramersy distributions

	(define normal-cf-sum
	  (forall ?x:Dist
	    (forall ?y:Dist
	      (if (and (is-norm ?x:Dist) (is-norm ?y:Dist))
	          (= (charFun (convo ?x:Dist ?y:Dist))
	             (mul-cf (charFun ?x:Dist) (charFun ?y:Dist)))))))
	(assert normal-cf-sum)

	#-- Cramér's Decomposition Theoremtheorem 
# ****************************************************************
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#-- MAYBE WRONG SINCE IT DOES NOT CHECK IF x and y are independent
# ****************************************************************
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

	(define THEOREM-Cramers-Decomposition
	  (forall ?x:Dist 
	    (forall ?y:Dist
	      (if (and (is-norm ?x:Dist) (is-norm ?y:Dist))
	          (is-norm (convo ?x:Dist ?y:Dist))))))

	#-- Proof of Cramér's Decomposition Theorem

	conclude THEOREM-Cramers-Decomposition
	pick-any x:Dist
	pick-any y:Dist
	assume (and (is-norm x) (is-norm y))
	(!mp
	 (!uspec normal-cf-backward (convo x y))
	 let {px := (!mp (!uspec normal-cf-forward x) (is-norm x));
	      py := (!mp (!uspec normal-cf-forward y) (is-norm y));
	      ncs := (!mp (!uspec (!uspec normal-cf-sum x) y) (and (is-norm x) (is-norm y)));
	      mcn := (!uspec (!uspec (!uspec (!uspec mul-cf-normal (mean x)) (var x)) (mean y)) (var y));
	      cmv := (!uspec (!uspec (!uspec normal-cf-mean-var (convo x y)) (+ (mean x) (mean y))) (+ (var x) (var y)))}
	   let {amv := (!mp 
	                 cmv
	                 (!chain [(charFun (convo x y))
	                          = (mul-cf (charFun x) (charFun y)) [ncs]
	                          = (mul-cf (NormalCF (mean x) (var x)) (charFun y)) [px]
	                          = (mul-cf (NormalCF (mean x) (var x)) (NormalCF (mean y) (var y))) [py]
	                          = (NormalCF (+ (mean x) (mean y)) (+ (var x) (var y))) [mcn]
	                          ]))}
	   (!chain [(charFun (convo x y))
	            = (mul-cf (charFun x) (charFun y)) [ncs]
	            = (mul-cf (NormalCF (mean x) (var x)) (charFun y)) [px]
	            = (mul-cf (NormalCF (mean x) (var x)) (NormalCF (mean y) (var y))) [py]
	            = (NormalCF (+ (mean x) (mean y)) (+ (var x) (var y))) [mcn]
	            = (NormalCF (mean (convo x y)) (+ (var x) (var y))) [(!left-and amv)]
	            = (NormalCF (mean (convo x y)) (var (convo x y))) [(!right-and amv)]
	            ]))


	#With ATP
	#(!prove THEOREM-Cramers-Decomposition [normal-cf-forward normal-cf-backward 
	#                                       normal-cf-sum mul-cf-normal normal-cf-mean-var 
	#                                       mul-cf-normal])

} # end module 


